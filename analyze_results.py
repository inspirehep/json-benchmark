import matplotlib.pyplot as plt

RESULTS = {
    "random": {
        "json_load": {
            "min": 0.00013626925647258759,
            "max": 0.03779830038547516,
            "avg": 0.002571610843762755,
            "p5": 0.00033683460205793383,
            "p25": 0.0009351498447358608,
            "p50": 0.0017235167324543,
            "p75": 0.0029510376043617725,
            "p95": 0.008301510754972697,
        },
        "json_dump": {
            "min": 0.0001759883016347885,
            "max": 0.0493631437420845,
            "avg": 0.003177771395072341,
            "p5": 0.00046489322558045386,
            "p25": 0.0012147719971835613,
            "p50": 0.0022152215242385864,
            "p75": 0.003650406841188669,
            "p95": 0.00964173125103116,
        },
        "orjson_load": {
            "min": 7.588043808937073e-05,
            "max": 0.026488391682505608,
            "avg": 0.0016769399158656597,
            "p5": 0.0002180788666009903,
            "p25": 0.0006028423085808754,
            "p50": 0.0011157486587762833,
            "p75": 0.0019043381325900555,
            "p95": 0.0054438778199255465,
        },
        "orjson_dump": {
            "min": 3.4008175134658813e-05,
            "max": 0.007969219237565994,
            "avg": 0.0006636625099927187,
            "p5": 9.699556976556778e-05,
            "p25": 0.00024140067398548126,
            "p50": 0.0004254905506968498,
            "p75": 0.0007495139725506306,
            "p95": 0.002272400353103876,
        },
        "ujson_load": {
            "min": 0.0001026298850774765,
            "max": 0.03341189585626125,
            "avg": 0.002272227367386222,
            "p5": 0.0002635111100971699,
            "p25": 0.0007731248624622822,
            "p50": 0.0014449208974838257,
            "p75": 0.0025985175743699074,
            "p95": 0.007743673399090767,
        },
        "ujson_dump": {
            "min": 8.50483775138855e-05,
            "max": 0.025557272136211395,
            "avg": 0.0018331779632717372,
            "p5": 0.00023595793172717094,
            "p25": 0.0006469311192631721,
            "p50": 0.0012147137895226479,
            "p75": 0.0021168403327465057,
            "p95": 0.005949648562818766,
        },
        "rapidjson_load": {
            "min": 0.0001170039176940918,
            "max": 0.039531098678708076,
            "avg": 0.0027491534277796744,
            "p5": 0.0003284646198153496,
            "p25": 0.0009621153585612774,
            "p50": 0.0018080659210681915,
            "p75": 0.003160702995955944,
            "p95": 0.009125666879117488,
        },
        "rapidjson_dump": {
            "min": 9.104423224925995e-05,
            "max": 0.02209547720849514,
            "avg": 0.0018705584052950144,
            "p5": 0.00024918820708990096,
            "p25": 0.0006488002836704254,
            "p50": 0.0012061819434165955,
            "p75": 0.002164024394005537,
            "p95": 0.0061599014326930044,
        },
        "simplejson_load": {
            "min": 0.00012789294123649597,
            "max": 0.02964932471513748,
            "avg": 0.002133301550522447,
            "p5": 0.00030220411717891694,
            "p25": 0.0007966631092131138,
            "p50": 0.0014611948281526566,
            "p75": 0.0024728188291192055,
            "p95": 0.0067425273358821865,
        },
        "simplejson_dump": {
            "min": 0.0002605561167001724,
            "max": 0.06459028832614422,
            "avg": 0.004131725179031491,
            "p5": 0.0006471219472587109,
            "p25": 0.0016909269616007805,
            "p50": 0.0029532238841056824,
            "p75": 0.004973721690475941,
            "p95": 0.01190550085157156,
        },
    },
    "many-authors": {
        "json_load": {
            "min": 0.007160300388932228,
            "max": 0.3179109115153551,
            "avg": 0.07637307294644416,
            "p5": 0.013509783241897822,
            "p25": 0.022117409855127335,
            "p50": 0.05530351772904396,
            "p75": 0.13200857304036617,
            "p95": 0.16480058263987302,
        },
        "json_dump": {
            "min": 0.009332684800028801,
            "max": 0.38788693957030773,
            "avg": 0.0909779446143657,
            "p5": 0.016633511148393156,
            "p25": 0.026849084068089724,
            "p50": 0.06829929258674383,
            "p75": 0.1560495118610561,
            "p95": 0.19685269808396696,
        },
        "orjson_load": {
            "min": 0.004901207983493805,
            "max": 0.23120713979005814,
            "avg": 0.05280944381467998,
            "p5": 0.009150637406855821,
            "p25": 0.014843821059912443,
            "p50": 0.03816998656839132,
            "p75": 0.09233201760798693,
            "p95": 0.11577248908579349,
        },
        "orjson_dump": {
            "min": 0.00180748850107193,
            "max": 0.06893805228173733,
            "avg": 0.018102600283920765,
            "p5": 0.003378639556467533,
            "p25": 0.005590952467173338,
            "p50": 0.01364763081073761,
            "p75": 0.03062082501128316,
            "p95": 0.038736852910369636,
        },
        "ujson_load": {
            "min": 0.006748160347342491,
            "max": 0.33009219355881214,
            "avg": 0.0737877932768315,
            "p5": 0.012232522014528513,
            "p25": 0.020292555913329124,
            "p50": 0.05243215523660183,
            "p75": 0.12805178947746754,
            "p95": 0.16603679629042745,
        },
        "ujson_dump": {
            "min": 0.004956299439072609,
            "max": 0.1980504672974348,
            "avg": 0.052411050906404855,
            "p5": 0.009365419670939446,
            "p25": 0.015544814057648182,
            "p50": 0.03839826211333275,
            "p75": 0.08994765998795629,
            "p95": 0.1132780303247273,
        },
        "rapidjson_load": {
            "min": 0.007998572662472725,
            "max": 0.3968493118882179,
            "avg": 0.08751749732345343,
            "p5": 0.014658361021429301,
            "p25": 0.024498187005519867,
            "p50": 0.061936539597809315,
            "p75": 0.1518925935961306,
            "p95": 0.19514711424708367,
        },
        "rapidjson_dump": {
            "min": 0.004977505654096603,
            "max": 0.1889375075697899,
            "avg": 0.05073694941028953,
            "p5": 0.009222415182739497,
            "p25": 0.015390750486403704,
            "p50": 0.037682474590837955,
            "p75": 0.08580705523490906,
            "p95": 0.10891706254333258,
        },
        "simplejson_load": {
            "min": 0.005911676213145256,
            "max": 0.26685724034905434,
            "avg": 0.0636942953709513,
            "p5": 0.011138783860951662,
            "p25": 0.018198733683675528,
            "p50": 0.04554138612002134,
            "p75": 0.11007486609742045,
            "p95": 0.13971817400306463,
        },
        "simplejson_dump": {
            "min": 0.011221541091799736,
            "max": 0.4519306495785713,
            "avg": 0.11330739485844969,
            "p5": 0.021530168876051903,
            "p25": 0.03435724042356014,
            "p50": 0.08499717433005571,
            "p75": 0.19451889162883162,
            "p95": 0.2405145701020956,
        },
    },
    "most-cited": {
        "json_load": {
            "min": 0.00015200674533843994,
            "max": 0.3685364853590727,
            "avg": 0.00524028467014432,
            "p5": 0.00021087303757667543,
            "p25": 0.0004494111053645611,
            "p50": 0.0007782680913805962,
            "p75": 0.0020330380648374557,
            "p95": 0.017480352707207204,
        },
        "json_dump": {
            "min": 0.00019237026572227478,
            "max": 0.44790042750537395,
            "avg": 0.006394005540758372,
            "p5": 0.0002858024090528488,
            "p25": 0.0006429720669984818,
            "p50": 0.0010741343721747398,
            "p75": 0.002592120785266161,
            "p95": 0.020387635659426452,
        },
        "orjson_load": {
            "min": 8.331984281539917e-05,
            "max": 0.26130304858088493,
            "avg": 0.003564463946968317,
            "p5": 0.00013631954789161682,
            "p25": 0.0002872399054467678,
            "p50": 0.000497245229780674,
            "p75": 0.0012834635563194752,
            "p95": 0.011393168475478888,
        },
        "orjson_dump": {
            "min": 3.6036595702171326e-05,
            "max": 0.07578329183161259,
            "avg": 0.001237439902499318,
            "p5": 5.806079134345055e-05,
            "p25": 0.00011989707127213478,
            "p50": 0.00019711721688508987,
            "p75": 0.0005278969183564186,
            "p95": 0.00423511266708374,
        },
        "ujson_load": {
            "min": 0.00010762736201286316,
            "max": 0.3992069512605667,
            "avg": 0.005013203462585807,
            "p5": 0.0001640157774090767,
            "p25": 0.0003652544692158699,
            "p50": 0.000630444847047329,
            "p75": 0.0017538401298224926,
            "p95": 0.01591513091698289,
        },
        "ujson_dump": {
            "min": 9.300932288169861e-05,
            "max": 0.23790639452636242,
            "avg": 0.003645854635164142,
            "p5": 0.00013424837961792946,
            "p25": 0.00031449925154447556,
            "p50": 0.0005491888150572777,
            "p75": 0.0014227554202079773,
            "p95": 0.01271440489217639,
        },
        "rapidjson_load": {
            "min": 0.00012524425983428955,
            "max": 0.4242754392325878,
            "avg": 0.005926249857991934,
            "p5": 0.00020274072885513307,
            "p25": 0.0004556984640657902,
            "p50": 0.0007957527413964272,
            "p75": 0.0021411990746855736,
            "p95": 0.019076586607843636,
        },
        "rapidjson_dump": {
            "min": 9.731575846672058e-05,
            "max": 0.2234526090323925,
            "avg": 0.003466435482725501,
            "p5": 0.0001520368270576,
            "p25": 0.0003160974010825157,
            "p50": 0.0005402648821473122,
            "p75": 0.0014456803910434246,
            "p95": 0.011556860990822315,
        },
        "simplejson_load": {
            "min": 0.0001315772533416748,
            "max": 0.31673640944063663,
            "avg": 0.0043762938007712365,
            "p5": 0.00019163889810442926,
            "p25": 0.0003881067968904972,
            "p50": 0.0006517507135868073,
            "p75": 0.0016522808000445366,
            "p95": 0.014181464072316885,
        },
        "simplejson_dump": {
            "min": 0.0002619680017232895,
            "max": 0.5301469005644321,
            "avg": 0.008050390353426338,
            "p5": 0.00040723886340856554,
            "p25": 0.0008655469864606857,
            "p50": 0.0014295708388090134,
            "p75": 0.003233464900404215,
            "p95": 0.025403476133942605,
        },
    },
}

def transformed_data():
    output = {}
    output["load"] = {}
    output["dump"] = {}
    for name, dataset in RESULTS.items():
        for lib, stats in dataset.items():
            if lib.endswith("_load"):
                lib_name = lib[:-len("_load")] 
                op_key = "load"
            else:
                lib_name = lib[:-len("_dump")] 
                op_key = "dump"
            out_stats = {
                "med": stats["p50"],
                "q1": stats["p25"],
                "q3": stats["p75"],
                "whislo": stats["min"],
                "whishi": stats["max"],
                "mean": stats["avg"],
                "label": lib_name
            }
            output[op_key].setdefault(name, []).append(out_stats)
    return output

def make_plot(data):
    fig, axs = plt.subplots(nrows=2, ncols=3, figsize=(15, 6))
    for (i, (op, data_per_dataset)) in enumerate(data.items()):
        for (j, (dataset, box_data)) in enumerate(data_per_dataset.items()):
            ax = axs[i, j]
            ax.bxp(box_data, showmeans=True, meanline=True, showfliers=False)
            ax.set_title(f"{dataset} ({op})")
            ax.set_ylabel("duration/record (s)")
    fig.subplots_adjust(wspace=0.2)
    fig.subplots_adjust(hspace=0.4)
    plt.savefig("results.png")


def print_total_times(data):
    print("Dataset", "Library", "Operation", "Average time full dataset", sep="|")
    print("---", "---", "---", "---", sep="|")
    for (op, data_per_dataset) in data.items():
        for (dataset, box_data) in data_per_dataset.items():
            for lib in box_data:
                print(dataset, lib["label"], op, lib["mean"]*1000, sep="|")

if __name__ == "__main__":
    data = transformed_data()
    print_total_times(data)
    make_plot(data)
